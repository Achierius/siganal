If we look at the equations for updating P, there is no influence from any
any matrix or vector that varies with time. Listed below are the relevant eqs:
(let ' denote a transposed matrix, ^ an inverted one, P._ denoting P sub k|k-1,
and P. denoting P sub k|K; P itself denotes P sub k-1|k-1)
  P._ = FPF' + Q
  P. = (I-KH)P._
with the Kalman gain defined as:
  K = P._H'S^
  S = HP._H' + R
  K = P._H'(HP._H'+R)^
If we compile these equations together, we obtain the overall evolution of the 
P covariance matrix per time-step:
  P. = (I-((FPF'+Q)H'(H(FPF'+Q)H' + R)^)H)(FPF'+Q)
The included matrices, obviously, consist only of:
  I, F, P, Q, H, R.
None of these vary per time-step. 
And how, then, does P involve itself in the evolution of the component of the
Kalman Filter in which we are specifically intereted?
The Kalman Gain develops as such-- P now denoting P sub k|k-1)
  K = PH'(HPH'+R)^
This, in some sense, can be seen as a ratio between PH' and HPH' + R.
HPH' + R is just the sensor reading covariance, and PH'... huh.
I've developed a calculator in kGainCalc.cpp that'll allow us to calculate how
K changes as P, H, and R change. In an ideal situation, the P matrix will shrink
as time goes on, given the convergingly accurate nature of the filter.
